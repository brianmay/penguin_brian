---
layout: talk
title: 7 Things laywers don't understand about Software
conference: /conferences/2009/01/24/LCA2009/
speaker: Anton Hughes
begin: 2009-01-22 11:40
---
IAAL - I am a laywer, and have a degree in engineering.

Software is mathematics and depends on freedom.

* Mathematics is not patentable. Never has been. Nobody knows why.
* My view: mathematics is too advanced, nobody understands it.

Laywers don't understand software.

* I am a laywer, so this is not meant to be a laywer bashing exercise.

Laywers trying to do the best they can with the knowledge they have.
Have to get their heads around ery technical issues.

Your milage may vary depending on who you are talking to.

Patents are hard to read. Not instructive. Source code is best
documentation.

## Top 7 isssues

1. Software & mathematics
   * writing software is a mathematical task
   * formally
   * historically
   * structurally
   * intuitively
   * Solution: make mathematics patentable? No, need good reason to change
   existing law.
2. Relationship between software and mental steps
   * ideas are not parentable
3. Abstraction
   * Physicality - patent should require physical device.
   * Remove uncertainity from inventor while they get produce on market.
   * Are existing patents on ideas? Ideas cannot be patented as they are not
physical.
   * Physical test not applied consistantly.
4. Reuse
5. The beauty of code
   * Laywers distracted by usefulness of code.
   * If you run it, then it is useful, and fits into patents not copyright.
   * You buy software and use it.
   * architecture - beautiful and useful. Copyright applies, not patents.
   * source code contains comments and is for other people.
6. Code vs Data
   * Hard to make distinction. In some cases the code is the data.
7. Authorship & Ownership
   * software developers feel they have property rights for their software.
   * property ownership is right to exclude others.
   * GPL excludes others.

## Conclusion

Quote from research article:

"The authors are grateful to Microsoft for supporting the research in this
article was based"

Software is literacy work (and should be covered by copyright not patents), but is useful (so covered by patents).

We need to teach laywers where they have misunderstood.
